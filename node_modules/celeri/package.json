{
  "name": "celeri",
  "description": "CLI lib",
  "version": "0.2.16",
  "author": {
    "name": "Craig Condon"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/crcn/celeri.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "structr": "0.2.x",
    "colors": "0.5.1",
    "plugin": "<0.2.0",
    "tq": "<=0.1.0",
    "crema": "<0.2.0",
    "beanpoll": "<0.3.0",
    "disposable": "<0.2.0",
    "outcome": "<0.2.0",
    "underscore": "1.2.x"
  },
  "main": "./lib/index.js",
  "readme": "\n### C-e-L-er-I\n\n![Alt command line](http://i.imgur.com/DA77U.png)\n\n### Features:\n\n- History (up/down arrows)\n- Progress Bar\n- Loading/busy spinner\n- Password input\n- Confirmation \n- Prompt\n- Parse command line args\n- help menu, and sub help menu\n- Multi-line tables\n- Build flexible commands via [beanpole](https://github.com/spiceapps/beanpole)\n    - OR statement \n    - Middleware\n    - Parameters  \n- Trees\n- *Exposing Javascript*, and calling it from the command line - inspired by mongo's CLI utilitiy\n\n### To Do:\n\n- Help menu api\n- Title View   \n- Custom colors for each view (input, loader, progress, table, etc.): exports.colors = {}\n- Error handling (display of command not found)\n- Add transports instead of depending on native stdin/stdout\n    - Ability to use online\n\n\n\n## Usage:\n\n\n### .option(cmdOrOps, descOrCallback, callback)\n\nListens for a key (enter, up, left, backspace, etc.), or command. See [beanpole](https://github.com/spiceapps/beanpole) for documentation.\n\n#### Hello World: \n\n```javascript\n\nvar celeri = require('celeri');\n\n//an option with info for the help menu\nceleri.option({\n    command: 'hello :person',\n    description: 'Prints \"hello [person]!\"',\n    optional: {\n        '--age': 'The person\\'s age',\n        '--gender': 'The person\\'s gender'\n    }\n}, function(data) {\n\n   console.log(\"Hello %s!\", data.person);\n   \n   if(data.age) console.log(\"%s is %d years old.\", data.person, data.age); \n   if(data.gender) console.log(\"%s is a %s.\", data.person, data.gender); \n\n});\n\n//open for character input\nceleri.open();\n\n//parse the command line args\nceleri.parse(process.argv);\n\n```\n\nInteractive in terminal:\n    \n```\n# node ./cmd ↩\n> hello craig ↩\nhello craig!\n```\n\npassed as arguments:\n\n```\n# node ./hello hello craig --age=21 --gender=cat ↩\nhello craig!\ncraig is 21 years old.\ncraig is a cat.\n```\n\nHelp menu:\n\n```\n# node ./cmd help ↩\n\nUsage: [command] --arg=value --arg2\n\nHelp:\n  help        Show help menu\n  [cmd] help  Show command help menu\n\nCommands:\n  hello       Prints \"hello [person]!\"\"\n\n```\n\nCommand Specific help menu:\n\n```\n# node ./cmd hello help  ↩\n\nPrints \"hello [person]!\"\"\n\nUsage: hello [person]\n\nOptional Flags: \n  --age       The person's age\n  --gender    The person's gender\n```\n\n\n\n### .usage(value)\n\nSets the help menu usage text\n\n```javascript\nceleri.usage('[command] --arg=value');\n```\n\n\n#### \"OR\" statement:\n\n```javascript\n\n\nceleri.option('hello :name OR hi :name', 'some description', function(data)\n{\n\tconsole.log('Hello ' + data.name +'!');\n}).\noption('set address :zip OR set address :city :state :zip', function(data)\n{\n\tconsole.log(\"City: %s, State: %s, Zip: %s \", data.city || 'None provided', data.state || 'None provided', data.zip);\n});\n\n```\n\n### .onJs(api)\n\nYou can easily expose javascript functions by providing an object:\n\n```javascript\n\n\nvar api = {\n    sayHello: function(name) {\n        console.log(\"hello %s!\", name || 'craig');\n    }\n}\n\nceleri.onJs({ api: api });\n\n```\n\nIn terminal:\n    \n    node ./hello ↩\n    > api.sayHello(\"john\"); ↩\n    hello john!\n\n### .progress(label, percent)\n\n```javascript\n\nvar i = 0;\n\nvar interval = setInterval(function()\n{\n\tceleri.progress('Label: ', i++);\n\t\n\tif(i == 100) clearInterval(i);\n}, 10);\n\n```\n\n### .loading(label)\n\n```javascript\n\nvar spinner = celeri.loading('Processing: ');\n\nsetTimeout(function()\n{\n\tspinner.done(true);//undefined = done, true = success, false = fail\n}, 1000);\n\n````\n\n### .prompt(label, callback)\n\n```javascript\n\nceleri.prompt('Username: ', function(input)\n{\n\t\n});\n\n````\n\n### .confirm(message, callback)\n\n```javascript\n\nceleri.confirm(\"Do you want to continue?\", function(yes)\n{\n\tif(yes)\n\t{\n\t\t//continue\n\t}\n});\n\n```\n\n### .password(label[, mask], callback)\n\n```javascript\n\t\n//mask = *\nceleri.password('Password: ', '*', function(input)\n{\n\t//password\n});\n\n//no mask\nceleri.password('Password: ', function(input)\n{\n\t//password\n});\n\n```\n\n### .auth(callback)\n\n```javascript\n\nceleri.auth(function(user, pass)\n{\n\t//auth here\n});\n\n```\n\n\n### .drawTable(objects, ops)\n\n```javascript\n\nvar objects = [\n    \n    {\n        name: 'Craig',\n        age: 21,\n        interests: 'Cooking, espresso, backpacking, coding'\n    },\n    \n    \n    {\n        name: 'Tim',\n        age: 21,\n        interests: 'Design, Traveling, Photography'\n        \n    }\n\n];\n\nceleri.drawTable(objects, {\n    columns: ['name','age','interests']\n});\n\n\n``` \n\n\nGives you something like:\n\n\n![Alt command line](http://i.imgur.com/oUtC9.png)\n\n\nHere's a multi-line table:\n\n\n![Alt command line](http://i.imgur.com/O5o47.png)    \n\n### .drawTree(tree)   \n\nDraws a tree\n\n````javascript\n                        \n//print out the contents of the celeri object\nceleri.drawTree(celeri);    \n\n````\n\nHere's another example:\n\n![Alt command line](http://i.imgur.com/4F0e0.png)\n\n\n### Let's kick it up a notch\n\n\n```javascript\n\nvar celeri = require('../lib');\n\n\nvar credentials;\n\n\n \nceleri.option('login OR login :user :pass', function(data)\n{\n    \n    //reference to the current request\n    var self = this;\n    \n\n    //called after auth credentials have been entered in\n    function onAuth(creds)\n    {\n\n        //credits wrong? DO NOT CONTINUE\n        if(creds.user != 'user' || creds.pass != 'pass')\n        {\n            return console.log(\"Incorrect user / pass\".red);\n        }\n        \n        //otherwise, add the user to the CURRENT request so it can be passed\n        //onto the next route listener\n        self.user = creds.user;\n        \n        //cache the credentials so the user doesn't have to login each time\n        credentials = creds;\n        \n        //not another listener? display a success response\n        if(!self.next()) console.log(\"Logged in as %s\", creds.user.green);\n    }\n    \n    \n    //user already logged in? pass!\n    if(credentials)\n    {\n        onAuth(credentials);\n    }\n    \n    //otherwise check if the user is passed in the route\n    else\n    if(data.user && data.pass)\n    {\n        onAuth(data);\n    }\n    \n    //or prompt for authentication\n    else\n    {\n        celeri.auth(function(user, pass)\n        {\n            onAuth({ user: user, pass: pass });\n        });\n    }\n});\n\n\n\n/**\n * This stuff's private. The user has to be authenticated *before* this command is executed\n */\n \nceleri.option('login -> account', function()\n{\n    console.log('Here\\'s your account info %s!', this.user.green);\n});\n\nceleri.open();\n\n\n\nceleri.parse(process.argv);\n\n\n```\n\nHere's what you get:\n\n![Alt command line](http://i.imgur.com/g7ywq.png)\n\n\n",
  "readmeFilename": "README.md",
  "_id": "celeri@0.2.16",
  "_from": "celeri"
}
